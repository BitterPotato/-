

	#include "UnityCG.cginc"
	#include "Lighting.cginc"
	#include "AutoLight.cginc"
	#include "MiunaCG.cginc"

	struct appdata
	{
		float4 vertex : POSITION;
		float4 normal : NORMAL;
	};

	struct v2f
	{
		float4 pos : SV_POSITION;
		float3 worldNormal : TEXCOORD0;
		float3 worldPos : TEXCOORD1;
		SHADOW_COORDS(2)
	};

	fixed4 _Color;

	fixed4 _DiffuseColor;

	fixed4 _SpecularColor;

	float _Gloss;

	v2f vert (appdata v)
	{
		v2f o;
		o.pos = UnityObjectToClipPos(v.vertex);
		o.worldNormal = UnityObjectToWorldNormal(v.normal);
		o.worldPos = mul(unity_ObjectToWorld, v.vertex);

		TRANSFER_SHADOW(o);

		return o;
	}

	// TODO: how to deal with the each-vertex and SH
	// blinn-phong model
	fixed4 fragd (v2f i) : SV_Target
	{
		fixed3 worldViewDir = normalize(UnityWorldSpaceViewDir(i.worldPos));
		fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));
		fixed3 wordldNormal = normalize(i.worldNormal);

		// diffuse
		fixed nl = halfLambert(dot(i.worldNormal, worldLightDir));
		fixed3 diffuse = _DiffuseColor * nl * _Color;

		// specular
		fixed3 halfDir = normalize(worldViewDir + worldLightDir);
		fixed coeff = pow(max(0, dot(halfDir, wordldNormal)), _Gloss);
		fixed3 specular = _SpecularColor * coeff * _Color;

		// combine shadow to light atten
		UNITY_LIGHT_ATTENUATION(atten, i, i.worldPos);
		fixed4 col = fixed4((diffuse + specular)*_LightColor0.rgb*atten, 1.0);

		return col;
	}

